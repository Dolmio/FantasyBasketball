package fantasy.web;


import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Set;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ConversionException;
import com.vaadin.data.Property.ReadOnlyException;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.util.BeanContainer;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DateField;
import com.vaadin.ui.Label;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.Select;
import com.vaadin.ui.Table;
import com.vaadin.ui.VerticalLayout;

import fantasy.domain.GameStat;
import fantasy.domain.Player;
import fantasy.domain.Team;
import fantasy.web.ui.admin.GameStatView;
public class PlayersView extends CustomComponent {

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private Label teamLabel;
	@AutoGenerated
	private PopupDateField endDateField;
	@AutoGenerated
	private PopupDateField startDateField;
	@AutoGenerated
	private Select playerSelect;


	private Table statsTable;
	
	private BeanContainer<Long, Player> players;
	
	private static final List<Object> COUNTABLE_COLUMNS = new ArrayList<Object>(Arrays.asList(new Object[]{"points", "rebounds", "assists", "blocks",
		"steals", "turnovers", "fgMade", "fgAttempts", "ftMade", "threePointsMade"}));
	

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public PlayersView() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		
		initStatsTable();
		
		
		this.players = new BeanContainer<Long, Player>(Player.class);
		players.setBeanIdProperty("id");
		playerSelect.setNullSelectionAllowed(false);
		playerSelect.setImmediate(true);
		updatePlayersView();

		//set dataresolution and default values to datefields
		
		startDateField.setImmediate(true);
		startDateField.setResolution(DateField.RESOLUTION_DAY);
		startDateField.setLocale(new Locale("fi", "FI"));
		try {
			startDateField.setValue(new SimpleDateFormat("yyyy/MM/dd").parse("2011/12/25"));
		} catch (ReadOnlyException e) {
			e.printStackTrace();
		} catch (ConversionException e) {
			e.printStackTrace();
		} catch (ParseException e) {
			e.printStackTrace();
		}
		endDateField.setImmediate(true);
		endDateField.setResolution(DateField.RESOLUTION_DAY);
		endDateField.setLocale(new Locale("fi", "FI"));
		endDateField.setValue(new java.util.Date());

		playerSelect.addListener(new Property.ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				updateStatsTable();
				if(players.size() != 0 && playerSelect.getValue() != null)  {
					String playersTeam = ((Team) (players.getItem(playerSelect.getValue()).getItemProperty("team").getValue())).getName();
					teamLabel.setValue("Team: " + playersTeam);
				}
			}
		});

		startDateField.addListener(new Property.ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				if(startDateField.getValue() != null){
					updateStatsTable();
				}

			}
		});


		endDateField.addListener(new Property.ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				if(endDateField.getValue() != null){
					updateStatsTable();
				}
			}
		});




	}

	private void updateStatsTable(){

		//Player selectedPlayer = getSelectedPlayer();
		if(playerSelect.getValue() != null){
			BeanContainer<Long, GameStat> filteredStatsContainer = new BeanContainer<Long, GameStat>(GameStat.class);
			filteredStatsContainer.setBeanIdProperty("id");
			
			Set<GameStat> allPlayerStats = (Set<GameStat>)players.getItem(playerSelect.getValue()).getItemProperty("stats").getValue();
			Set<GameStat> filteredStats = new HashSet<GameStat>();
			Date upperLimit = (Date) endDateField.getValue();
			Date lowerLimit = (Date) startDateField.getValue();
			
			//Accept stats, which time falls between limits
			for(GameStat stat : allPlayerStats){
				
				long statTime = stat.getDateWhen().getTime();
				
				if(statTime > lowerLimit.getTime() &&
						statTime < upperLimit.getTime()){
					filteredStats.add(stat);
				}
			}
			
			filteredStatsContainer.addAll(filteredStats);
			statsTable.setContainerDataSource(filteredStatsContainer);
			
			
			statsTable.setVisibleColumns(GameStatView.VISIBLE_COLUMNS);
			statsTable.setColumnHeaders(GameStatView.COLUMN_HEADERS);
			
			//set column footers
			for(Object columnId: GameStatView.VISIBLE_COLUMNS){
				if(COUNTABLE_COLUMNS.contains(columnId)){
					statsTable.setColumnFooter(columnId, String.valueOf(getColumnSum(columnId)));
				}
			}
			statsTable.setColumnFooter("dateWhen", "Sum");
			statsTable.setFooterVisible(true);
			
		}
	
	

	}
	
	/**
	 * Calculate sum of column values. Caller have to make sure parametercolumn is numerable.
	 * @param propertyId - column property
	 * @return
	 */
	private int getColumnSum(Object propertyId){
		
		int sum = 0;
		
		for(Object statId : statsTable.getItemIds()){
			Object num = statsTable.getItem(statId).getItemProperty(propertyId).getValue();
			sum += Integer.parseInt(num.toString());
		}
		return sum;
	}
	
	

	public void updatePlayersView(){
		playerSelect.removeAllItems();
		players.addAll(Player.findAllPlayers());
		playerSelect.setContainerDataSource(players);
		
		//combine names and make them item caption
		for(Object itemId : playerSelect.getItemIds()){
			playerSelect.setItemCaption(itemId,
					players.getItem(itemId).getItemProperty("lastName").toString() + " " +  
							players.getItem(itemId).getItemProperty("firstName"));
		}
		
		if(players.size() != 0){
			playerSelect.select(players.getIdByIndex(0));
		}
		
	}


	private void initStatsTable(){
		//we want to customize date presentation
		statsTable = new Table(){
			@Override
		    protected String formatPropertyValue(Object rowId,
		            Object colId, Property property) {
		        // Format by property type
		        if (property.getType() == Date.class) {
		            SimpleDateFormat df =
		                new SimpleDateFormat("dd.MM.yyyy");
		            return df.format((Date)property.getValue());
		        }

		        return super.formatPropertyValue(rowId, colId, property);
		    }
		};
		statsTable.setImmediate(true);
		statsTable.setWidth("-1px");
		statsTable.setHeight("-1px");
		statsTable.setPageLength(0);
		
		mainLayout.addComponent(statsTable);
		
		
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("-1px");
		
		// playerSelect
		playerSelect = new Select();
		playerSelect.setCaption("Players:");
		playerSelect.setImmediate(false);
		playerSelect.setWidth("-1px");
		playerSelect.setHeight("-1px");
		mainLayout.addComponent(playerSelect);
		
		// startDateField
		startDateField = new PopupDateField();
		startDateField.setCaption("From:");
		startDateField.setImmediate(false);
		startDateField.setWidth("-1px");
		startDateField.setHeight("-1px");
		startDateField.setInvalidAllowed(false);
		mainLayout.addComponent(startDateField);
		
		// endDateField
		endDateField = new PopupDateField();
		endDateField.setCaption("To:");
		endDateField.setImmediate(false);
		endDateField.setWidth("-1px");
		endDateField.setHeight("-1px");
		endDateField.setInvalidAllowed(false);
		mainLayout.addComponent(endDateField);
		
		// teamLabel
		teamLabel = new Label();
		teamLabel.setImmediate(false);
		teamLabel.setWidth("-1px");
		teamLabel.setHeight("-1px");
		mainLayout.addComponent(teamLabel);
		
		return mainLayout;
	}
}
