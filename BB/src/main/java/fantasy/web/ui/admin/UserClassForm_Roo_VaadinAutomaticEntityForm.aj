// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package fantasy.web.ui.admin;

import java.util.Arrays;
import java.util.Collection;

import org.springframework.context.i18n.LocaleContextHolder;
import org.vaadin.addon.customfield.beanfield.BeanFieldWrapper;

import com.vaadin.data.Item;
import com.vaadin.data.util.BeanContainer;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.DateField;
import com.vaadin.ui.DefaultFieldFactory;
import com.vaadin.ui.Field;
import com.vaadin.ui.FormFieldFactory;
import com.vaadin.ui.TextField;

import fantasy.domain.Team;
import fantasy.domain.UserClass;
import fantasy.domain.authentication.Role;

privileged aspect UserClassForm_Roo_VaadinAutomaticEntityForm {
    
    private BeanItemContainer<Role> UserClassForm.containerForRoles;
    
    public ComboBox UserClassForm.buildTeamCombo() {
        ComboBox combo = new ComboBox(null, getContainerForTeams());
        Object captionPropertyId = getTeamCaptionPropertyId();
        if (captionPropertyId != null) {
            combo.setItemCaptionPropertyId(captionPropertyId);
        }
        return combo;
    }
    
    public ComboBox UserClassForm.buildUserRoleCombo() {
        ComboBox combo = new ComboBox(null, getContainerForRoles());
        Object captionPropertyId = getRoleCaptionPropertyId();
        if (captionPropertyId != null) {
            combo.setItemCaptionPropertyId(captionPropertyId);
        }
        return combo;
    }
    
    public FormFieldFactory UserClassForm.getFormFieldFactory() {
        return new DefaultFieldFactory() {
            @Override
            public Field createField(Item item, Object propertyId, Component uiContext) {
                Field field = null;
                if (getIdProperty().equals(propertyId) || getVersionProperty().equals(propertyId)) {
                    return null;
                } else if ("team".equals(propertyId)) {
                    ComboBox combo = buildTeamCombo();
                    field = new BeanFieldWrapper<Team>(combo, Team.class, getContainerForTeams(), "id");
                    field.setCaption(createCaptionByPropertyId(propertyId));
                } else if ("userRole".equals(propertyId)) {
                    field = buildUserRoleCombo();
                    field.setCaption(createCaptionByPropertyId(propertyId));
                } else {
                    field = super.createField(item, propertyId, uiContext);
                    if (field instanceof TextField) {
                        ((TextField) field).setNullRepresentation("");
                    }
                    if (field instanceof DateField) {
                        ((DateField) field).setLocale(LocaleContextHolder.getLocale());
                        field.setInvalidAllowed(true);
                    }
                }
                return field;
            }
        };
    }
    
    public BeanItemContainer<Role> UserClassForm.getContainerForRoles() {
        if (containerForRoles == null) {
            Collection<Role> items = Arrays.asList(Role.class.getEnumConstants());
            BeanItemContainer<Role> container = new BeanItemContainer<Role>(items);
            containerForRoles = container;
        }
        return containerForRoles;
    }
    
    public BeanContainer<Long, Team> UserClassForm.getContainerForTeams() {
        BeanContainer<Long, Team> container = new BeanContainer<Long, Team>(Team.class);
        container.setBeanIdProperty("id");
        for (Team entity : Team.findAllTeams()) {
            container.addBean(entity);
        }
        return container;
    }
    
    public Class<UserClass> UserClassForm.getEntityClass() {
        return UserClass.class;
    }
    
    public Object UserClassForm.getRoleCaptionPropertyId() {
        return null;
    }
    
    public Object UserClassForm.getTeamCaptionPropertyId() {
        return "name";
    }
    
    public String UserClassForm.getIdProperty() {
        return "id";
    }
    
    public String UserClassForm.getVersionProperty() {
        return "version";
    }
    
}
