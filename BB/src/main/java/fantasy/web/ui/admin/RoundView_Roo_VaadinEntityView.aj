// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package fantasy.web.ui.admin;

import com.vaadin.data.Item;
import com.vaadin.data.util.BeanContainer;
import com.vaadin.data.util.BeanItem;
import com.vaadin.ui.Table;
import fantasy.domain.Round;
import fantasy.web.ui.admin.EntityTableColumnGenerator;
import java.lang.Class;
import java.lang.Long;
import java.lang.Object;
import java.lang.String;
import java.util.List;

privileged aspect RoundView_Roo_VaadinEntityView {
    
    public String RoundView.getEntityName() {
        return "Round";
    }
    
    public Class<Round> RoundView.getEntityClass() {
        return Round.class;
    }
    
    public boolean RoundView.isCreateAllowed() {
        return true;
    }
    
    public boolean RoundView.isUpdateAllowed() {
        return true;
    }
    
    public boolean RoundView.isDeleteAllowed() {
        return true;
    }
    
    public List<Round> RoundView.listEntities() {
        List<Round> list = Round.findAllRounds();
        return list;
    }
    
    public Round RoundView.saveEntity(Round entity) {
        if (entity == null) {
            return null;
        }
        return (Round) entity.merge();
    }
    
    public void RoundView.deleteEntity(Round entity) {
        if (entity != null) {
            entity.remove();
        }
    }
    
    public boolean RoundView.isNewEntity(Round entity) {
        return (entity != null && getIdForEntity(entity) == null);
    }
    
    public String RoundView.getIdProperty() {
        return "id";
    }
    
    public String RoundView.getVersionProperty() {
        return "version";
    }
    
    public Round RoundView.createEntityInstance() {
        return new Round();
    }
    
    public BeanContainer<Long, Round> RoundView.getTableContainer() {
        BeanContainer<Long, Round> container = new BeanContainer<Long, Round>(Round.class);
        container.setBeanIdProperty("id");
        for (Round entity : Round.findAllRounds()) {
            container.addBean(entity);
        }
        return container;
    }
    
    public Item RoundView.getItemForEntity(Round entity) {
        Item item = getTable().getItem(entity.getId());
        if (item == null) {
            item = new BeanItem<Round>(entity);
        }
        return item;
    }
    
    public Round RoundView.getEntityForItem(Item item) {
        if (item != null) {
            return ((BeanItem<Round>) item).getBean();
        } else {
            return null;
        }
    }
    
    public Object RoundView.getIdForEntity(Round entity) {
        return entity != null ? entity.getId() : null;
    }
    
    public void RoundView.setupGeneratedColumns(Table table) {
        table.removeGeneratedColumn("games");
        table.addGeneratedColumn("games", new EntityTableColumnGenerator((String) getGameCaptionPropertyId()));
    }
    
    public Object RoundView.getGameCaptionPropertyId() {
        return null;
    }
    
}
