package fantasy.web.ui;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.CustomComponent;
import fantasy.domain.Player;
import fantasy.web.FantasyApplication;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Table;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Button;
import com.vaadin.data.Property;
import com.vaadin.data.util.BeanItem;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.addon.jpacontainer.JPAContainer;
import com.vaadin.addon.jpacontainer.JPAContainerFactory;
public class PlayerTable extends CustomComponent {

	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private Table playersTable;

	@AutoGenerated
	private HorizontalLayout buttonLayout;

	@AutoGenerated
	private Button deleteButton;

	@AutoGenerated
	private Button editButton;

	@AutoGenerated
	private Button addButton;

	
	private JPAContainer<Player> players;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public PlayerTable() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		players = JPAContainerFactory.make(Player.class, FantasyApplication.PERSISTENCE_UNIT);
		playersTable.setContainerDataSource(players);
		playersTable.setSelectable(true);
		playersTable.setVisibleColumns(new Object[] {"name", "players"});
		playersTable.setImmediate(true);
        playersTable.addListener(new Property.ValueChangeListener() {
            @Override
            public void valueChange(ValueChangeEvent event) {
                setModificationsEnabled(event.getProperty().getValue() != null);
            }

            private void setModificationsEnabled(boolean b) {
                deleteButton.setEnabled(b);
                editButton.setEnabled(b);
            }
        });
		
addButton.addListener(new ClickListener() {
			
			@Override
			public void buttonClick(ClickEvent event) {
				final BeanItem<Team> newTeamItem = new BeanItem<Team>(new Team());
				TeamEditor teamEditor = new TeamEditor(newTeamItem);
				teamEditor.addListener(new EditorSavedListener() {
					
					@Override
					public void editorSaved(EditorSavedEvent event) {
						System.out.println("Tallennus");
						players.addEntity(newTeamItem.getBean()); 
						
					}
				});
				getApplication().getMainWindow().addWindow(teamEditor);
				
			}
		});
		
		
		editButton.addListener(new Button.ClickListener() { 
		    @Override 
		    public void buttonClick(ClickEvent event) { 
		        getApplication().getMainWindow() 
		          .addWindow(new TeamEditor( 
		             playersTable.getItem(playersTable.getValue()))); 
		    } 
		});
		editButton.setEnabled(false);
		
		deleteButton.addListener(new Button.ClickListener() { 
		    @Override 
		    public void buttonClick(ClickEvent event) { 
		        players.removeItem(playersTable.getValue()); 
		    } 
		}); 
		deleteButton.setEnabled(false); 
	}
	

	@AutoGenerated
	private void buildMainLayout() {
		// the main layout and components will be created here
		mainLayout = new VerticalLayout();
	}

}
