package fantasy.web.ui;

import java.text.SimpleDateFormat;
import java.util.Collection;
import java.util.Date;
import java.util.List;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.util.BeanContainer;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.Table;
import com.vaadin.ui.VerticalLayout;

import fantasy.domain.Game;
import fantasy.domain.Round;
import fantasy.domain.RoundTotal;
import fantasy.domain.Team;


public class ResultsView extends CustomComponent implements ContentUpdateable {

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private VerticalLayout roundFrame;
	@AutoGenerated
	private ComboBox roundSelect;


	private static final long serialVersionUID = 1L;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public ResultsView() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		roundSelect.setNullSelectionAllowed(false);
		
		roundSelect.addListener(new ValueChangeListener() {
			
			private static final long serialVersionUID = 1L;

			@Override
			public void valueChange(ValueChangeEvent event) {
				if(roundSelect.getValue() != null){
					roundFrame.removeAllComponents();
					Long selectedRoundId = (Long) roundSelect.getValue();
					Round selectedRound = Round.findRound(selectedRoundId);
					makeRoundContent(selectedRound);
					
				}
				
			}
		});
		
	}

	public void updateContent(){
		roundFrame.removeAllComponents();
		updateRoundSelect();
		
		
	}
	
	private void makeRoundContent(Round round){
		//every round has a header
		String startDate = formatDate(round.getStartDate());
		String endDate = formatDate(round.getEndDate());
		Label roundLabel = new Label(round.getName() + " " + startDate + " - " + endDate);
		roundLabel.setStyleName("roundHeader");
		roundLabel.setWidth("-1px");
		roundFrame.addComponent(roundLabel);
		roundFrame.setComponentAlignment(roundLabel, new Alignment(Alignment.TOP_CENTER.getBitMask()));
		
		//make table for every game in round
		for(Game game : round.getGames()){
			makeGameTable(round, game);
		}
	}
	
	private void updateRoundSelect(){
		Collection<Round> rounds = Round.getRoundsWithGames();
		BeanContainer<Long, Round> roundContainer = new BeanContainer<Long, Round>(Round.class);
		roundContainer.setBeanIdProperty("id");
		roundContainer.addAll(rounds);
		//sort desceding by startdate
		roundContainer.sort(new Object[]{"startDate"}, new boolean[]{false});
		roundSelect.setContainerDataSource(roundContainer);
		//select first item if not empty
		if(roundContainer.size() != 0){
			roundSelect.select(roundContainer.getIdByIndex(0));
		}
		
		//update selects item captions from ids to round names
		for(Object itemId : roundSelect.getItemIds()){
			roundSelect.setItemCaption( itemId,  roundContainer.getItem(itemId).getBean().getName());
		}
	}
	
	private String formatDate(Date date){
		SimpleDateFormat format = new SimpleDateFormat("dd.MM.yyyy");
		return format.format(date);
	}
	
	private void makeGameTable(Round round, Game game){
		Table gameTable = new Table();
		gameTable.setPageLength(2);
		
		RoundTotal homeRoundTotal = getCurrentRoundTotal(round, game.getHomeTeam());
		RoundTotal awayRoundTotal = getCurrentRoundTotal(round, game.getAwayTeam());
		gameTable.setCaption(game.getHomeTeam().getName() + " VS "+ game.getAwayTeam().getName());
		if(homeRoundTotal == null || awayRoundTotal == null) return;
		
		
		//Roundtotals are showed in the table
		BeanContainer<Long, RoundTotal> totalsContainer = new BeanContainer<Long, RoundTotal>(RoundTotal.class);
		totalsContainer.setBeanIdProperty("id");
		
		totalsContainer.addBean(homeRoundTotal);
		totalsContainer.addBean(awayRoundTotal);
		
		
		gameTable.setContainerDataSource(totalsContainer);
		totalsContainer.addNestedContainerProperty("team.name");
		Object[] visibleColumns = new Object[] {"team.name","points", "lpPoints","rebounds", "lpRebounds", "assists", "lpAssists", 
				"blocks", "lpBlocks", "steals", "lpSteals", "turnovers", "lpTurnovers", "ftMade", "lpFtMade", "threePointsMade",
				"lpThreePointsMade", "fieldGoalPercentage", "lpFieldGoalPercentage", "totalPoints"};
		gameTable.setVisibleColumns(visibleColumns);
		String[] columnHeaders = new String[]{"Teams", "Pts", "LP-Pts", "Reb", "LP-Reb", "Ass", "LP-Ass", "Blk", "LP-Blk", "Stl", "LP-Stl",
												"To", "LP-To", "Ftm", "LP-Ftm", "3Fgm", "LP-3Fgm",  "Fg%", "LP-Fg%", "Total points"};
		gameTable.setColumnHeaders(columnHeaders);
		gameTable.setStyleName("resultTable");
		roundFrame.addComponent(gameTable);
		roundFrame.setComponentAlignment(gameTable, new Alignment(Alignment.TOP_CENTER.getBitMask()));
		
	}
	
	private RoundTotal getCurrentRoundTotal(Round round, Team team){
		RoundTotal currentRoundTotal = null;
		for(RoundTotal roundTotal: team.getRoundTotals()){
			if(roundTotal.getRound().equals(round)){
				currentRoundTotal = roundTotal;
				break;
			}
		}
		return currentRoundTotal;
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("-1px");
		
		// roundSelect
		roundSelect = new ComboBox();
		roundSelect.setCaption("Valitse kierros:");
		roundSelect.setImmediate(true);
		roundSelect.setWidth("-1px");
		roundSelect.setHeight("-1px");
		mainLayout.addComponent(roundSelect);
		mainLayout.setComponentAlignment(roundSelect, new Alignment(20));
		
		// roundFrame
		roundFrame = new VerticalLayout();
		roundFrame.setImmediate(false);
		roundFrame.setWidth("-1px");
		roundFrame.setHeight("-1px");
		roundFrame.setMargin(true);
		roundFrame.setSpacing(true);
		mainLayout.addComponent(roundFrame);
		mainLayout.setComponentAlignment(roundFrame, new Alignment(20));
		
		return mainLayout;
	}
	
}
