// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package fantasy.web.ui;

import com.vaadin.data.Item;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.DateField;
import com.vaadin.ui.DefaultFieldFactory;
import com.vaadin.ui.Field;
import com.vaadin.ui.FormFieldFactory;
import com.vaadin.ui.TextField;
import fantasy.domain.PlayerPos;
import fantasy.domain.positions.PlayerPosition;
import java.lang.Class;
import java.lang.Object;
import java.lang.String;
import java.util.Arrays;
import java.util.Collection;
import org.springframework.context.i18n.LocaleContextHolder;

privileged aspect PlayerPosForm_Roo_VaadinAutomaticEntityForm {
    
    private BeanItemContainer<PlayerPosition> PlayerPosForm.containerForPlayerPositions;
    
    public ComboBox PlayerPosForm.buildPlayerPositionCombo() {
        ComboBox combo = new ComboBox(null, getContainerForPlayerPositions());
        Object captionPropertyId = getPlayerPositionCaptionPropertyId();
        if (captionPropertyId != null) {
            combo.setItemCaptionPropertyId(captionPropertyId);
        }
        return combo;
    }
    
    public FormFieldFactory PlayerPosForm.getFormFieldFactory() {
        return new DefaultFieldFactory() {
            @Override
            public Field createField(Item item, Object propertyId, Component uiContext) {
                Field field = null;
                if (getIdProperty().equals(propertyId) || getVersionProperty().equals(propertyId)) {
                    return null;
                } else if ("playerPosition".equals(propertyId)) {
                    field = buildPlayerPositionCombo();
                    field.setCaption(createCaptionByPropertyId(propertyId));
                } else {
                    field = super.createField(item, propertyId, uiContext);
                    if (field instanceof TextField) {
                        ((TextField) field).setNullRepresentation("");
                    }
                    if (field instanceof DateField) {
                        ((DateField) field).setLocale(LocaleContextHolder.getLocale());
                        field.setInvalidAllowed(true);
                    }
                }
                return field;
            }
        };
    }
    
    public BeanItemContainer<PlayerPosition> PlayerPosForm.getContainerForPlayerPositions() {
        if (containerForPlayerPositions == null) {
            Collection<PlayerPosition> items = Arrays.asList(PlayerPosition.class.getEnumConstants());
            BeanItemContainer<PlayerPosition> container = new BeanItemContainer<PlayerPosition>(items);
            containerForPlayerPositions = container;
        }
        return containerForPlayerPositions;
    }
    
    public Class<PlayerPos> PlayerPosForm.getEntityClass() {
        return PlayerPos.class;
    }
    
    public Object PlayerPosForm.getPlayerPositionCaptionPropertyId() {
        return null;
    }
    
    public String PlayerPosForm.getIdProperty() {
        return "id";
    }
    
    public String PlayerPosForm.getVersionProperty() {
        return "version";
    }
    
}
