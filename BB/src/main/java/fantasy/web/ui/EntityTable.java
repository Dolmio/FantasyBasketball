package fantasy.web.ui;

import java.lang.reflect.Constructor;
import java.util.List;

import com.vaadin.addon.jpacontainer.JPAContainer;
import com.vaadin.addon.jpacontainer.JPAContainerFactory;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.util.BeanItem;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Table;
import com.vaadin.ui.VerticalLayout;

import fantasy.domain.Team;
import fantasy.web.FantasyApplication;
import fantasy.domain.Team;

public class EntityTable<E> extends CustomComponent {
	
	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private Table entityTable;

	@AutoGenerated
	private HorizontalLayout buttonLayout;

	@AutoGenerated
	private Button deleteButton;

	@AutoGenerated
	private Button editButton;

	@AutoGenerated
	private Button addButton;
	
	
	private JPAContainer<E> entities;
	
	
	public EntityTable() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		
	}
	
	public void init(final Class<E> entityClass, Object[] visibleColumns,final EntityEditor<E> entityEditor){
		// TODO add user code here
				System.out.println(entityClass);
				entities = JPAContainerFactory.make(entityClass , FantasyApplication.PERSISTENCE_UNIT);
			
				//	
				if(entities.getItemIds().size() == 0){
//					Team t1 = new Team();
//					t1.setName("Bulls");
//					Team t2 = new Team();
//					t2.setName("Chicago");
//					entities.addEntity(t1);
//					entities.addEntity(t2);
//				}
				
				entityTable.setContainerDataSource(entities);
				entityTable.setSelectable(true);
				entityTable.setVisibleColumns(visibleColumns);
				entityTable.setImmediate(true);
		        entityTable.addListener(new Property.ValueChangeListener() {
		            @Override
		            public void valueChange(ValueChangeEvent event) {
		                setModificationsEnabled(event.getProperty().getValue() != null);
		            }

		            private void setModificationsEnabled(boolean b) {
		                deleteButton.setEnabled(b);
		                editButton.setEnabled(b);
		            }
		        });
				
				
				addButton.addListener(new ClickListener() {
					
					@Override
					public void buttonClick(ClickEvent event) {
						final BeanItem<E> newEntityItem; 
						try {
							newEntityItem = new BeanItem<E>(entityClass.newInstance());
							entityEditor.setEntityItem(newEntityItem);
							entityEditor.addListener(new EditorSavedListener() {
								
								@Override
								public void editorSaved(EditorSavedEvent event) {
									
									entities.addEntity(newEntityItem.getBean()); 
									
								}
							});
							getApplication().getMainWindow().addWindow(entityEditor);
						
						
						} catch (InstantiationException e) {
							
							e.printStackTrace();
						} catch (IllegalAccessException e) {
							
							e.printStackTrace();
						}
						
						
						
					}
				});
				
				
				editButton.addListener(new Button.ClickListener() { 
				    @Override 
				    public void buttonClick(ClickEvent event) { 
				        entityEditor.setEntityItem( entityTable.getItem(entityTable.getValue()));
				    	getApplication().getMainWindow() 
				          .addWindow(entityEditor); 
				    } 
				});
				editButton.setEnabled(false);
				
				deleteButton.addListener(new Button.ClickListener() { 
				    @Override 
				    public void buttonClick(ClickEvent event) { 
				        entities.removeItem(entityTable.getValue()); 
				    } 
				}); 
				deleteButton.setEnabled(false); }
	}
	
	
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// buttonLayout
		buttonLayout = buildButtonLayout();
		mainLayout.addComponent(buttonLayout);
		mainLayout.setComponentAlignment(buttonLayout, new Alignment(20));
		
		// teamsTable
		entityTable = new Table();
		entityTable.setImmediate(false);
		entityTable.setWidth("-1px");
		entityTable.setHeight("-1px");
		mainLayout.addComponent(entityTable);
		mainLayout.setExpandRatio(entityTable, 1.0f);
		mainLayout.setComponentAlignment(entityTable, new Alignment(20));
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildButtonLayout() {
		// common part: create layout
		buttonLayout = new HorizontalLayout();
		buttonLayout.setCaption("Teams");
		buttonLayout.setImmediate(false);
		buttonLayout.setWidth("-1px");
		buttonLayout.setHeight("-1px");
		buttonLayout.setMargin(false);
		
		// addButton
		addButton = new Button();
		addButton.setCaption("Add");
		addButton.setImmediate(true);
		addButton.setWidth("-1px");
		addButton.setHeight("-1px");
		buttonLayout.addComponent(addButton);
		
		// editButton
		editButton = new Button();
		editButton.setCaption("Edit");
		editButton.setImmediate(true);
		editButton.setWidth("-1px");
		editButton.setHeight("-1px");
		buttonLayout.addComponent(editButton);
		
		// deleteButton
		deleteButton = new Button();
		deleteButton.setCaption("Delete");
		deleteButton.setImmediate(true);
		deleteButton.setWidth("-1px");
		deleteButton.setHeight("-1px");
		buttonLayout.addComponent(deleteButton);
		
		return buttonLayout;
	}

}

	
	
	

