package fantasy.web.ui;

import com.vaadin.addon.jpacontainer.JPAContainer;
import com.vaadin.addon.jpacontainer.JPAContainerFactory;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.util.BeanItem;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Table;
import com.vaadin.ui.VerticalLayout;

import fantasy.domain.Team;
import fantasy.web.FantasyApplication;
public class TeamTable extends CustomComponent {

	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private Table teamsTable;

	@AutoGenerated
	private HorizontalLayout buttonLayout;

	@AutoGenerated
	private Button deleteButton;

	@AutoGenerated
	private Button editButton;

	@AutoGenerated
	private Button addButton;

	

	private JPAContainer<Team> teams;

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public TeamTable() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		teams = JPAContainerFactory.make(Team.class, FantasyApplication.PERSISTENCE_UNIT);
		if(teams.getItemIds().size() == 0){
			Team t1 = new Team();
			t1.setName("Bulls");
			Team t2 = new Team();
			t2.setName("Chicago");
			teams.addEntity(t1);
			teams.addEntity(t2);
		}
		
		teamsTable.setContainerDataSource(teams);
		teamsTable.setSelectable(true);
		teamsTable.setVisibleColumns(new Object[] {"name", "players"});
		teamsTable.setImmediate(true);
        teamsTable.addListener(new Property.ValueChangeListener() {
            @Override
            public void valueChange(ValueChangeEvent event) {
                setModificationsEnabled(event.getProperty().getValue() != null);
            }

            private void setModificationsEnabled(boolean b) {
                deleteButton.setEnabled(b);
                editButton.setEnabled(b);
            }
        });
		
		
		addButton.addListener(new ClickListener() {
			
			@Override
			public void buttonClick(ClickEvent event) {
				final BeanItem<Team> newTeamItem = new BeanItem<Team>(new Team());
				TeamEditor teamEditor = new TeamEditor(newTeamItem);
				teamEditor.addListener(new EditorSavedListener() {
					
					@Override
					public void editorSaved(EditorSavedEvent event) {
						System.out.println("Tallennus");
						teams.addEntity(newTeamItem.getBean()); 
						
					}
				});
				getApplication().getMainWindow().addWindow(teamEditor);
				
			}
		});
		
		
		editButton.addListener(new Button.ClickListener() { 
		    @Override 
		    public void buttonClick(ClickEvent event) { 
		        getApplication().getMainWindow() 
		          .addWindow(new TeamEditor( 
		             teamsTable.getItem(teamsTable.getValue()))); 
		    } 
		});
		editButton.setEnabled(false);
		
		deleteButton.addListener(new Button.ClickListener() { 
		    @Override 
		    public void buttonClick(ClickEvent event) { 
		        teams.removeItem(teamsTable.getValue()); 
		    } 
		}); 
		deleteButton.setEnabled(false); 
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// buttonLayout
		buttonLayout = buildButtonLayout();
		mainLayout.addComponent(buttonLayout);
		mainLayout.setComponentAlignment(buttonLayout, new Alignment(20));
		
		// teamsTable
		teamsTable = new Table();
		teamsTable.setImmediate(false);
		teamsTable.setWidth("-1px");
		teamsTable.setHeight("-1px");
		mainLayout.addComponent(teamsTable);
		mainLayout.setExpandRatio(teamsTable, 1.0f);
		mainLayout.setComponentAlignment(teamsTable, new Alignment(20));
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildButtonLayout() {
		// common part: create layout
		buttonLayout = new HorizontalLayout();
		buttonLayout.setCaption("Teams");
		buttonLayout.setImmediate(false);
		buttonLayout.setWidth("-1px");
		buttonLayout.setHeight("-1px");
		buttonLayout.setMargin(false);
		
		// addButton
		addButton = new Button();
		addButton.setCaption("Add");
		addButton.setImmediate(true);
		addButton.setWidth("-1px");
		addButton.setHeight("-1px");
		buttonLayout.addComponent(addButton);
		
		// editButton
		editButton = new Button();
		editButton.setCaption("Edit");
		editButton.setImmediate(true);
		editButton.setWidth("-1px");
		editButton.setHeight("-1px");
		buttonLayout.addComponent(editButton);
		
		// deleteButton
		deleteButton = new Button();
		deleteButton.setCaption("Delete");
		deleteButton.setImmediate(true);
		deleteButton.setWidth("-1px");
		deleteButton.setHeight("-1px");
		buttonLayout.addComponent(deleteButton);
		
		return buttonLayout;
	}

}
