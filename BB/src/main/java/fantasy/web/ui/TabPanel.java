package fantasy.web.ui;


import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.TabSheet.SelectedTabChangeEvent;
import com.vaadin.ui.TabSheet.SelectedTabChangeListener;
import com.vaadin.ui.VerticalLayout;

import fantasy.domain.authentication.Role;
import fantasy.web.FantasyApplication;
import fantasy.web.authentication.LoginForm;

public class TabPanel extends CustomComponent {

	
	private static final long serialVersionUID = 1L;
	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private TabSheet tabSheet;
	@AutoGenerated
	private LoginForm loginForm;
	@AutoGenerated
	private UpdateView updateView;
	@AutoGenerated
	private FantasyEntityManagerView fantasyEntityManagerView;
	@AutoGenerated
	private PlayersView playersView_1;
	@AutoGenerated
	private OwnTeamView ownTeamView;
	@AutoGenerated
	private TeamsView teamsView_1;
	@AutoGenerated
	private RulesView rulesView;
	@AutoGenerated
	private NewsView newsView;
	@AutoGenerated
	private ResultsView resultsView_1;
	@AutoGenerated
	private StandingsView standingsView;

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public TabPanel() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		
		setAdminViewsVisible(false);
		setManagerViewsVisible(false);
		
		//update TeamsView when loading it
		tabSheet.addListener(new SelectedTabChangeListener() {
			private static final long serialVersionUID = 1L;

			@Override
			public void selectedTabChange(SelectedTabChangeEvent event) {
				//update views when entering to them.
				if(tabSheet.getSelectedTab() instanceof ContentUpdateable){
					((ContentUpdateable) tabSheet.getSelectedTab()).updateContent();
				}
				else if(tabSheet.getSelectedTab() instanceof LoginForm){
					Role currentRole = FantasyApplication.getInstance().getCurrentUser().getUserRole();
					//if role is not visitor we must be logged in so logout
					if(currentRole != Role.VISITOR){
						FantasyApplication.getInstance().setCurrentUser(FantasyApplication.VISITOR);
						tabSheet.getTab(loginForm).setCaption("Login");
						refreshRoleTabs();
						tabSheet.setSelectedTab(standingsView);
					}
				}
				
				
			}
		});
	}
	
	public void refreshAfterLogin(){
		refreshRoleTabs();
		tabSheet.setSelectedTab(standingsView);
		tabSheet.getTab(loginForm).setCaption("Logout");
	}
	
	private void refreshRoleTabs(){
		FantasyApplication app = FantasyApplication.getInstance();
		Role currentRole = app.getCurrentUser().getUserRole();
		if(currentRole == Role.ADMIN){
			setAdminViewsVisible(true);
			setManagerViewsVisible(false);
		}
		else if(currentRole == Role.MANAGER){
			setManagerViewsVisible(true);
			setAdminViewsVisible(false);
		}
		//(visitor)
		else{
			setManagerViewsVisible(false);
			setAdminViewsVisible(false);
		}
	}
	
	private void setAdminViewsVisible(boolean visible){
		
		tabSheet.getTab(fantasyEntityManagerView).setVisible(visible);
		tabSheet.getTab(updateView).setVisible(visible);
	}
	
	private void setManagerViewsVisible(boolean visible){
		tabSheet.getTab(ownTeamView).setVisible(visible);
	}
	
	

	
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("-1px");
		
		// tabSheet
		tabSheet = buildTabSheet();
		mainLayout.addComponent(tabSheet);
		
		return mainLayout;
	}

	@AutoGenerated
	private TabSheet buildTabSheet() {
		// common part: create layout
		tabSheet = new TabSheet();
		tabSheet.setImmediate(true);
		tabSheet.setWidth("100.0%");
		tabSheet.setHeight("-1px");
		
		// standingsView
		standingsView = new StandingsView();
		standingsView.setImmediate(false);
		standingsView.setWidth("100.0%");
		standingsView.setHeight("-1px");
		tabSheet.addTab(standingsView, "Standings", null);
		
		// resultsView_1
		resultsView_1 = new ResultsView();
		resultsView_1.setImmediate(false);
		resultsView_1.setWidth("100.0%");
		resultsView_1.setHeight("-1px");
		tabSheet.addTab(resultsView_1, "Results", null);
		
		// newsView
		newsView = new NewsView();
		newsView.setImmediate(false);
		newsView.setWidth("-1px");
		newsView.setHeight("-1px");
		tabSheet.addTab(newsView, "News", null);
		
		// rulesView
		rulesView = new RulesView();
		rulesView.setImmediate(false);
		rulesView.setWidth("-1px");
		rulesView.setHeight("100.0%");
		tabSheet.addTab(rulesView, "Rules", null);
		
		// teamsView_1
		teamsView_1 = new TeamsView();
		teamsView_1.setImmediate(false);
		teamsView_1.setWidth("100.0%");
		teamsView_1.setHeight("-1px");
		tabSheet.addTab(teamsView_1, "Teams", null);
		
		// ownTeamView
		ownTeamView = new OwnTeamView();
		ownTeamView.setImmediate(false);
		ownTeamView.setWidth("100.0%");
		ownTeamView.setHeight("-1px");
		tabSheet.addTab(ownTeamView, "Own Team", null);
		
		// playersView_1
		playersView_1 = new PlayersView();
		playersView_1.setImmediate(false);
		playersView_1.setWidth("100.0%");
		playersView_1.setHeight("-1px");
		tabSheet.addTab(playersView_1, "Players", null);
		
		// fantasyEntityManagerView
		fantasyEntityManagerView = new FantasyEntityManagerView();
		fantasyEntityManagerView.setImmediate(false);
		fantasyEntityManagerView.setWidth("100.0%");
		fantasyEntityManagerView.setHeight("500px");
		tabSheet.addTab(fantasyEntityManagerView, "Admin", null);
		
		// updateView
		updateView = new UpdateView();
		updateView.setImmediate(false);
		updateView.setWidth("100.0%");
		updateView.setHeight("-1px");
		tabSheet.addTab(updateView, "Update", null);
		
		// loginForm
		loginForm = new LoginForm();
		loginForm.setImmediate(false);
		loginForm.setWidth("100.0%");
		loginForm.setHeight("-1px");
		tabSheet.addTab(loginForm, "Login", null);
		
		return tabSheet;
	}

}
