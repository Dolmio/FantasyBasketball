package fantasy.web.ui;

import java.util.Arrays;
import java.util.Collection;
import java.util.Set;

import com.vaadin.addon.jpacontainer.JPAContainer;
import com.vaadin.addon.jpacontainer.JPAContainerFactory;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.util.filter.Compare;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Field;
import com.vaadin.ui.Label;
import com.vaadin.ui.Select;
import com.vaadin.ui.Table;
import com.vaadin.ui.TableFieldFactory;
import com.vaadin.ui.VerticalLayout;

import fantasy.domain.Player;
import fantasy.domain.Team;
import fantasy.domain.positions.PlayerPosition;
import fantasy.domain.positions.TeamPosition;
import fantasy.web.FantasyApplication;

public class OwnTeamView extends CustomComponent implements ContentUpdateable {

	private static final long serialVersionUID = 1L;
	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private Table teamTable;
	@AutoGenerated
	private Label label_1;
	
	private boolean tableUpdateInProgress = false;
	

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public OwnTeamView() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		//user can edit positions of his players
		teamTable.setEditable(true);
		teamTable.setPageLength(0);
	}
	
	/**
	 * generates fields for table.
	 */
	private void setTableFieldFactory(){
		
		teamTable.setTableFieldFactory(new TableFieldFactory() {

			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			@Override
			public Field createField(Container container, Object itemId,
					Object propertyId, Component uiContext) {

				//only currentPosition is editable field

				if(propertyId.equals("currentPosition")){
					Select select = new Select();
					select.setImmediate(true);
					Collection<TeamPosition> items = Arrays.asList(TeamPosition.class.getEnumConstants());
					Container players = teamTable.getContainerDataSource();
					@SuppressWarnings("unchecked")
					Set<PlayerPosition> possiblePositions = (Set<PlayerPosition>) players.getItem(itemId).getItemProperty("possiblePositions").getValue();
				

					//add all positions where player can play
					for (TeamPosition teamPosition : items) {
						for(PlayerPosition possiblePosition : possiblePositions) {
							if(possiblePosition.canPlay(teamPosition)){
								select.addItem(teamPosition);
							}
						}
					}

					//remove positions which already exist in team
					for(Object playerId : players.getItemIds()){
						TeamPosition currentPosition = (TeamPosition) players.getItem(playerId).getItemProperty("currentPosition").getValue();
						if(currentPosition != TeamPosition.BENCH && playerId != itemId){
							select.removeItem(currentPosition);
						}
					}

					select.setNullSelectionAllowed(false);

					//update available values, when value from any field is changed
					select.addListener(new ValueChangeListener() {

						/**
						 * 
						 */
						private static final long serialVersionUID = 1L;

						@Override
						public void valueChange(ValueChangeEvent event) {
							if(!OwnTeamView.this.tableUpdateInProgress){
								updateContent();
							}
						}
					});
					
					return (Field) select;
				}
				return null;
			}
		});



	}


	private JPAContainer<Player> getTeamPlayers(){
		Team currentTeam = FantasyApplication.getInstance().getCurrentUser().getTeam();
		JPAContainer<Player> playerContainer = JPAContainerFactory.make(Player.class, FantasyApplication.PERSISTENCE_UNIT);
		playerContainer.addContainerFilter(new Compare.Equal("team", currentTeam));
		return playerContainer;
	}

	public void updateContent(){
		tableUpdateInProgress = true;
		teamTable.setContainerDataSource(getTeamPlayers());
		setTableFieldFactory();
		teamTable.setVisibleColumns(new String[] {"lastName", "firstName", "possiblePositions", "currentPosition"});
		teamTable.setSortDisabled(true);
		tableUpdateInProgress = false;
	}
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// label_1
		label_1 = new Label();
		label_1.setImmediate(false);
		label_1.setWidth("-1px");
		label_1.setHeight("-1px");
		label_1.setValue("My Team");
		mainLayout.addComponent(label_1);
		mainLayout.setComponentAlignment(label_1, new Alignment(20));
		
		// teamTable
		teamTable = new Table();
		teamTable.setImmediate(false);
		teamTable.setWidth("-1px");
		teamTable.setHeight("-1px");
		mainLayout.addComponent(teamTable);
		mainLayout.setExpandRatio(teamTable, 1.0f);
		mainLayout.setComponentAlignment(teamTable, new Alignment(48));
		
		return mainLayout;
	}

}
