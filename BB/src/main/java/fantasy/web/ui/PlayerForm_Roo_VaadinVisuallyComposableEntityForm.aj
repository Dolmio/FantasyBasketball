// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package fantasy.web.ui;

import com.vaadin.addon.beanvalidation.BeanValidationValidator;
import com.vaadin.data.Container;
import com.vaadin.data.Item;
import com.vaadin.data.Property;
import com.vaadin.data.Validator;
import com.vaadin.data.util.BeanContainer;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.ui.AbstractSelect;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.Field;
import com.vaadin.ui.TextField;
import fantasy.domain.Player;
import fantasy.domain.PlayerPos;
import fantasy.domain.Team;
import fantasy.domain.positions.TeamPosition;
import java.lang.Class;
import java.lang.Long;
import java.lang.Object;
import java.lang.String;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;
import org.vaadin.addon.customfield.ConvertingValidator;
import org.vaadin.addon.customfield.PropertyConverter;
import org.vaadin.addon.customfield.beanfield.BeanFieldPropertyConverter;
import org.vaadin.addon.customfield.beanfield.BeanSetFieldPropertyConverter;

privileged aspect PlayerForm_Roo_VaadinVisuallyComposableEntityForm {
    
    private Map<Object, Field> PlayerForm.fieldMap = new LinkedHashMap<Object, Field>();
    
    private Map<Object, PropertyConverter> PlayerForm.converterMap = new LinkedHashMap<Object, PropertyConverter>();
    
    private BeanItemContainer<TeamPosition> PlayerForm.containerForTeamPositions;
    
    public Collection<Object> PlayerForm.getBeanPropertyIds() {
        return Arrays.asList(new Object[] { "firstName", "lastName", "possiblePositions", "currentPosition", "team" });
    }
    
    public Field PlayerForm.getField(Object propertyId) {
        return fieldMap.get(propertyId);
    }
    
    public void PlayerForm.configure() {
        configureFieldMap();
        configureFields();
        configureContainersForFields();
        configureConverters();
        configureValidators();
    }
    
    public void PlayerForm.refresh() {
        configureContainersForFields();
        configureConverters();
        configureValidators();
    }
    
    public boolean PlayerForm.isModified() {
        if (getItemDataSource() != null) {
            for (Object propertyId : getItemDataSource().getItemPropertyIds()) {
                Field field = getField(propertyId);
                if (field != null && field.isModified()) {
                    return true;
                }
            }
        }
        return false;
    }
    
    public void PlayerForm.configureFieldMap() {
        fieldMap.put("firstName", firstNameField);
        fieldMap.put("lastName", lastNameField);
        fieldMap.put("possiblePositions", possiblePositionsField);
        fieldMap.put("currentPosition", currentPositionField);
        fieldMap.put("team", teamField);
    }
    
    public void PlayerForm.configureFields() {
        for (Object propertyId : getBeanPropertyIds()) {
            Field field = getField(propertyId);
            if (field == null) {
                continue;
            }
            if (field instanceof TextField) {
                ((TextField) field).setNullRepresentation("");
            }
            field.setWriteThrough(false);
            field.setInvalidAllowed(true);
        }
    }
    
    public void PlayerForm.configureContainersForFields() {
        Field field;
        
        field = getField("possiblePositions");
        if (field instanceof AbstractSelect) {
            ((AbstractSelect) field).setContainerDataSource(getContainerForPlayerPoses());
            Object captionId = getPlayerPosCaptionPropertyId();
            if (captionId != null) {
                ((AbstractSelect) field).setItemCaptionPropertyId(captionId);
            } else {
                ((AbstractSelect) field).setItemCaptionMode(AbstractSelect.ITEM_CAPTION_MODE_ITEM);
            }
        }
        
        field = getField("team");
        if (field instanceof AbstractSelect) {
            ((AbstractSelect) field).setContainerDataSource(getContainerForTeams());
            Object captionId = getTeamCaptionPropertyId();
            if (captionId != null) {
                ((AbstractSelect) field).setItemCaptionPropertyId(captionId);
            } else {
                ((AbstractSelect) field).setItemCaptionMode(AbstractSelect.ITEM_CAPTION_MODE_ITEM);
            }
        }
        
        field = getField("currentPosition");
        if (field instanceof AbstractSelect) {
            ((AbstractSelect) field).setContainerDataSource(getContainerForTeamPositions());
            Object captionId = getTeamPositionCaptionPropertyId();
            if (captionId != null) {
                ((AbstractSelect) field).setItemCaptionPropertyId(captionId);
            } else {
                ((AbstractSelect) field).setItemCaptionMode(AbstractSelect.ITEM_CAPTION_MODE_EXPLICIT_DEFAULTS_ID);
            }
        }
    }
    
    public void PlayerForm.configureConverters() {
        // cannot parametrize PropertyConverter here due to an AJDT bug
        PropertyConverter converter;
        Container container;
        Field field;
        
        field = getField("possiblePositions");
        if (field instanceof AbstractSelect) {
            container = ((AbstractSelect) field).getContainerDataSource();
            converter = new BeanSetFieldPropertyConverter<PlayerPos, Long>(PlayerPos.class, container, "id");
            converterMap.put("possiblePositions", converter);
        }
        
        field = getField("team");
        if (field instanceof AbstractSelect) {
            container = ((AbstractSelect) field).getContainerDataSource();
            converter = new BeanFieldPropertyConverter<Team, Long>(Team.class, container, "id");
            converterMap.put("team", converter);
        }
        
    }
    
    public void PlayerForm.configureValidators() {
        for (Object propertyId : getBeanPropertyIds()) {
            Field field = getField(propertyId);
            if (field != null) {
                Collection<Validator> validators = field.getValidators();
                if (validators != null) {
                    for (Validator validator : new ArrayList<Validator>(field.getValidators())) {
                        if (validator instanceof BeanValidationValidator || validator instanceof ConvertingValidator) {
                            field.removeValidator(validator);
                        }
                    }
                }
                BeanValidationValidator validator = new BeanValidationValidator(getEntityClass(), String.valueOf(propertyId));
                if (validator.isRequired()) {
                    field.setRequired(true);
                    field.setRequiredError(validator.getRequiredMessage());
                }
                PropertyConverter converter = getConverter(propertyId);
                if (converter == null) {
                    field.addValidator(validator);
                } else {
                    field.addValidator(new ConvertingValidator(validator, converter));
                }
            }
        }
    }
    
    public PropertyConverter PlayerForm.getConverter(Object propertyId) {
        return converterMap.get(propertyId);
    }
    
    public BeanContainer<Long, PlayerPos> PlayerForm.getContainerForPlayerPoses() {
        BeanContainer<Long, PlayerPos> container = new BeanContainer<Long, PlayerPos>(PlayerPos.class);
        container.setBeanIdProperty("id");
        for (PlayerPos entity : PlayerPos.findAllPlayerPoses()) {
            container.addBean(entity);
        }
        return container;
    }
    
    public BeanItemContainer<TeamPosition> PlayerForm.getContainerForTeamPositions() {
        if (containerForTeamPositions == null) {
            Collection<TeamPosition> items = Arrays.asList(TeamPosition.class.getEnumConstants());
            BeanItemContainer<TeamPosition> container = new BeanItemContainer<TeamPosition>(items);
            containerForTeamPositions = container;
        }
        return containerForTeamPositions;
    }
    
    public BeanContainer<Long, Team> PlayerForm.getContainerForTeams() {
        BeanContainer<Long, Team> container = new BeanContainer<Long, Team>(Team.class);
        container.setBeanIdProperty("id");
        for (Team entity : Team.findAllTeams()) {
            container.addBean(entity);
        }
        return container;
    }
    
    public Object PlayerForm.getPlayerPosCaptionPropertyId() {
        return null;
    }
    
    public Object PlayerForm.getTeamPositionCaptionPropertyId() {
        return null;
    }
    
    public Object PlayerForm.getTeamCaptionPropertyId() {
        return "name";
    }
    
    public String PlayerForm.getIdProperty() {
        return "id";
    }
    
    public String PlayerForm.getVersionProperty() {
        return "version";
    }
    
    public void PlayerForm.validateFields() {
        if (getItemDataSource() != null) {
            for (Object propertyId : getItemDataSource().getItemPropertyIds()) {
                Field field = getField(propertyId);
                if (field != null && !field.isReadOnly()) {
                    field.validate();
                }
            }
        }
    }
    
    public void PlayerForm.commitFields() {
        if (getItemDataSource() != null) {
            for (Object propertyId : getItemDataSource().getItemPropertyIds()) {
                Field field = getField(propertyId);
                if (field != null && !field.isReadOnly()) {
                    field.commit();
                }
            }
        }
    }
    
    public void PlayerForm.setFieldPropertyDataSource(Object propertyId, Property property) {
        Field field = getField(propertyId);
        if (field == null) {
            return;
        }
        if (property == null) {
            field.setPropertyDataSource(null);
        } else {
            PropertyConverter converter = getConverter(propertyId);
            if (converter != null) {
                converter.setPropertyDataSource(property);
                field.setPropertyDataSource(converter);
            } else {
                if (field instanceof CheckBox && property.getValue() == null) {
                    property.setValue(Boolean.FALSE);
                }
                field.setPropertyDataSource(property);
            }
        }
    }
    
    public void PlayerForm.setFieldValues(Item item) {
        if (item != null) {
            // set values for fields in item
            for (Object propertyId : item.getItemPropertyIds()) {
                setFieldPropertyDataSource(propertyId, item.getItemProperty(propertyId));
            }
            // other fields are not touched by default
        } else {
            // reset all fields
            for (Object propertyId : getBeanPropertyIds()) {
                setFieldPropertyDataSource(propertyId, null);
            }
        }
    }
    
    public Field PlayerForm.getFirstField() {
        Iterator<Object> it = getBeanPropertyIds().iterator();
        if (it.hasNext()) {
            return getField(it.next());
        }
        return null;
    }
    
    public Class<Player> PlayerForm.getEntityClass() {
        return Player.class;
    }
    
}
