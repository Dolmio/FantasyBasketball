// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package fantasy.domain;

import fantasy.domain.Rules;
import java.lang.Integer;
import java.lang.Long;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.PersistenceContext;
import javax.persistence.Version;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Rules_Roo_Entity {
    
    declare @type: Rules: @Entity;
    
    @PersistenceContext
    transient EntityManager Rules.entityManager;
    
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "id")
    private Long Rules.id;
    
    @Version
    @Column(name = "version")
    private Integer Rules.version;
    
    public Long Rules.getId() {
        return this.id;
    }
    
    public void Rules.setId(Long id) {
        this.id = id;
    }
    
    public Integer Rules.getVersion() {
        return this.version;
    }
    
    public void Rules.setVersion(Integer version) {
        this.version = version;
    }
    
    @Transactional
    public void Rules.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Rules.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Rules attached = Rules.findRules(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Rules.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Rules.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Rules Rules.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Rules merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager Rules.entityManager() {
        EntityManager em = new Rules().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Rules.countRuleses() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Rules o", Long.class).getSingleResult();
    }
    
    public static List<Rules> Rules.findAllRuleses() {
        return entityManager().createQuery("SELECT o FROM Rules o", Rules.class).getResultList();
    }
    
    public static Rules Rules.findRules(Long id) {
        if (id == null) return null;
        return entityManager().find(Rules.class, id);
    }
    
    public static List<Rules> Rules.findRulesEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Rules o", Rules.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
