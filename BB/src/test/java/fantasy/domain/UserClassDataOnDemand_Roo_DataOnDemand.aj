// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package fantasy.domain;

import fantasy.domain.Team;
import fantasy.domain.TeamDataOnDemand;
import fantasy.domain.UserClass;
import fantasy.domain.authentication.Role;
import java.lang.String;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect UserClassDataOnDemand_Roo_DataOnDemand {
    
    declare @type: UserClassDataOnDemand: @Component;
    
    private Random UserClassDataOnDemand.rnd = new SecureRandom();
    
    private List<UserClass> UserClassDataOnDemand.data;
    
    @Autowired
    private TeamDataOnDemand UserClassDataOnDemand.teamDataOnDemand;
    
    public UserClass UserClassDataOnDemand.getNewTransientUserClass(int index) {
        UserClass obj = new UserClass();
        setPassword(obj, index);
        setTeam(obj, index);
        setUserRole(obj, index);
        setUsername(obj, index);
        return obj;
    }
    
    public void UserClassDataOnDemand.setPassword(UserClass obj, int index) {
        String password = "password_" + index;
        obj.setPassword(password);
    }
    
    public void UserClassDataOnDemand.setTeam(UserClass obj, int index) {
        Team team = teamDataOnDemand.getRandomTeam();
        obj.setTeam(team);
    }
    
    public void UserClassDataOnDemand.setUserRole(UserClass obj, int index) {
        Role userRole = Role.class.getEnumConstants()[0];
        obj.setUserRole(userRole);
    }
    
    public void UserClassDataOnDemand.setUsername(UserClass obj, int index) {
        String username = "username_" + index;
        obj.setUsername(username);
    }
    
    public UserClass UserClassDataOnDemand.getSpecificUserClass(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        UserClass obj = data.get(index);
        return UserClass.findUserClass(obj.getId());
    }
    
    public UserClass UserClassDataOnDemand.getRandomUserClass() {
        init();
        UserClass obj = data.get(rnd.nextInt(data.size()));
        return UserClass.findUserClass(obj.getId());
    }
    
    public boolean UserClassDataOnDemand.modifyUserClass(UserClass obj) {
        return false;
    }
    
    public void UserClassDataOnDemand.init() {
        data = UserClass.findUserClassEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'UserClass' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<fantasy.domain.UserClass>();
        for (int i = 0; i < 10; i++) {
            UserClass obj = getNewTransientUserClass(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
