// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package fantasy.domain;

import fantasy.domain.Game;
import fantasy.domain.Round;
import fantasy.domain.RoundDataOnDemand;
import fantasy.domain.Team;
import fantasy.domain.TeamDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect GameDataOnDemand_Roo_DataOnDemand {
    
    declare @type: GameDataOnDemand: @Component;
    
    private Random GameDataOnDemand.rnd = new SecureRandom();
    
    private List<Game> GameDataOnDemand.data;
    
    @Autowired
    private TeamDataOnDemand GameDataOnDemand.teamDataOnDemand;
    
    @Autowired
    private RoundDataOnDemand GameDataOnDemand.roundDataOnDemand;
    
    public Game GameDataOnDemand.getNewTransientGame(int index) {
        Game obj = new Game();
        setAwayTeam(obj, index);
        setHomeTeam(obj, index);
        setRound(obj, index);
        setWinnerTeam(obj, index);
        return obj;
    }
    
    public void GameDataOnDemand.setAwayTeam(Game obj, int index) {
        Team awayTeam = teamDataOnDemand.getRandomTeam();
        obj.setAwayTeam(awayTeam);
    }
    
    public void GameDataOnDemand.setHomeTeam(Game obj, int index) {
        Team homeTeam = teamDataOnDemand.getRandomTeam();
        obj.setHomeTeam(homeTeam);
    }
    
    public void GameDataOnDemand.setRound(Game obj, int index) {
        Round round = roundDataOnDemand.getRandomRound();
        obj.setRound(round);
    }
    
    public void GameDataOnDemand.setWinnerTeam(Game obj, int index) {
        Team winnerTeam = teamDataOnDemand.getRandomTeam();
        obj.setWinnerTeam(winnerTeam);
    }
    
    public Game GameDataOnDemand.getSpecificGame(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Game obj = data.get(index);
        return Game.findGame(obj.getId());
    }
    
    public Game GameDataOnDemand.getRandomGame() {
        init();
        Game obj = data.get(rnd.nextInt(data.size()));
        return Game.findGame(obj.getId());
    }
    
    public boolean GameDataOnDemand.modifyGame(Game obj) {
        return false;
    }
    
    public void GameDataOnDemand.init() {
        data = Game.findGameEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Game' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<fantasy.domain.Game>();
        for (int i = 0; i < 10; i++) {
            Game obj = getNewTransientGame(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
